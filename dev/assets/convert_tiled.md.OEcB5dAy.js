import{_ as a,c as e,o as n,aA as i}from"./chunks/framework.c7-9pERD.js";const k=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"convert_tiled.md","filePath":"convert_tiled.md","lastUpdated":null}'),p={name:"convert_tiled.md"};function t(l,s,o,c,r,h){return n(),e("div",null,[...s[0]||(s[0]=[i(`<div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>import SphericalSpatialTrees as SST</span></span>
<span class="line"><span>import GeometryOps as GO, GeoInterface as GI</span></span>
<span class="line"><span>import DiskArrays</span></span>
<span class="line"><span></span></span>
<span class="line"><span>using GeometryOps.UnitSpherical: GeographicFromUnitSphere, spherical_distance,</span></span>
<span class="line"><span>                            UnitSphereFromGeographic, SphericalCap</span></span>
<span class="line"><span></span></span>
<span class="line"><span>using Rasters, RasterDataSources, ArchGDAL, Zarr # data sources</span></span>
<span class="line"><span>using GeoMakie, GLMakie # visualization</span></span>
<span class="line"><span></span></span>
<span class="line"><span>ENV[&quot;RASTERDATASOURCES_PATH&quot;] = mkdir(joinpath(@__DIR__, &quot;data&quot;)) # hide</span></span></code></pre></div><p>Now that we have loaded all of these packages, let&#39;s start talking about functionality.</p><p>First, let&#39;s use the top-level interface to create a lazily regridded array, from a lat-long source to a DGGS target.</p><p>This dataset is a bioclimatic dataset, which is sufficiently small that you can do this quickly on your machine.</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ras = Raster(WorldClim{BioClim}, 5) |&gt; r -&gt; replace_missing(r, NaN)</span></span>
<span class="line"><span>ras = modify(ras) do A</span></span>
<span class="line"><span>    DiskArrays.TestTypes.UnchunkedDiskArray(A)</span></span>
<span class="line"><span>end # TODO: remove once diskarrays pr is merged</span></span></code></pre></div><p>Let&#39;s give this dataset some chunks. It&#39;s 2180x1080 so 100x100 chunks give it 22x11 chunks.</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ras_chunked = DiskArrays.mockchunks(ras,  (100, 100))</span></span></code></pre></div><p>Now, we need to define the source and target trees. The dataset itself is on a plane (equirectangular projection), so we can use the <code>RegularGridTree</code> which is an implicit quadtree.</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>source = SST.ProjectionSource(SST.RegularGridTree, ras_chunked);</span></span>
<span class="line"><span>nothing #hide</span></span></code></pre></div><p>We want to go to a DGGS target, so we can use the <code>ISEACircleTree</code> (based on the Snyder equal area projection). This is the only tree so far but more can be added as we go forward.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">target </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SST</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ProjectionTarget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(SST</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ISEACircleTree, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#1b7c83;--shiki-dark:#39c5cf;">ProjectionSource(163840-leaf ISEACircleTree(7))</span></span></code></pre></div><p>As a sidenote, this is what actually happens internally. Using the spatial tree interface, we compute the map of chunks in the source dataset that each chunk in the target dataset requires to be materialized.</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SST.compute_connected_chunks(source, target)</span></span></code></pre></div><p>Now, we can create the lazy projected disk array.</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>a = SST.LazyProjectedDiskArray(source, target)</span></span></code></pre></div><p>You can now access some data, using this as you would use any array:</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>a[1:10,1:10,1]</span></span></code></pre></div><p>You can also materialize the array fully into memory (if the array is small enough):</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ac = collect(a)</span></span></code></pre></div><p>Now let&#39;s visualize this! GLMakie has no problem visualizing this many polygons:</p><p>First, let&#39;s get every polygon:</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>polys = SST.index_to_polygon_lonlat.(eachindex(a), (target.tree,))</span></span></code></pre></div><p>Then we can just assign the correct color to the correct polygon, and plot on GeoMakie&#39;s <code>GlobeAxis</code>.</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>fig, ax, plt = poly(vec(polys); color = vec(ac), strokewidth = 1, strokecolor = :black, axis = (; type = GlobeAxis, show_axis = false))</span></span>
<span class="line"><span>meshimage!(ax, -180..180, -90..90, fill(colorant&quot;white&quot;, 2, 2); zlevel = -100_000) # background plot</span></span>
<span class="line"><span>fig</span></span></code></pre></div><p>To give a better idea of what this looks like, let&#39;s use a lower level (lower resolution) DGGS:</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>target = SST.ProjectionTarget(SST.ISEACircleTree, 3, 2)</span></span>
<span class="line"><span>a = SST.LazyProjectedDiskArray(source, target)</span></span>
<span class="line"><span>ac = mapreduce((i,j)-&gt;cat(i,j,dims=3),1:10) do n</span></span>
<span class="line"><span>    a[:,:,n]</span></span>
<span class="line"><span>end</span></span>
<span class="line"><span>polys = SST.index_to_polygon_lonlat.(eachindex(a), (target.tree,))</span></span>
<span class="line"><span>fig, ax, plt = poly(vec(polys); color = vec(ac), strokewidth = 1, strokecolor = :black, axis = (; type = GlobeAxis, show_axis = false))</span></span>
<span class="line"><span>meshimage!(ax, -180..180, -90..90, fill(colorant&quot;white&quot;, 2, 2); zlevel = -100_000) # background plot</span></span>
<span class="line"><span>fig</span></span></code></pre></div><p>And that&#39;s the basics!</p><p>Now we can go a bit into the weeds of capabilities and how this works.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mycoord </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">11.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">53.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rad </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1e-6</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">iseat </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SST</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ISEACircleTree</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">22</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mycircle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> SphericalCap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">UnitSphereFromGeographic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()(mycoord), rad)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">GeometryOps.UnitSpherical.SphericalCap{Float64}(UnitSphericalPoint(0.5907579861332358, 0.11483171997015439, 0.7986355100472928), 1.0e-6)</span></span></code></pre></div><p>Query</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>r = GO.query(iseat, mycircle)</span></span>
<span class="line"><span>points = SST.index_to_lonlat.(r, (iseat,))</span></span>
<span class="line"><span>f, a, p = scatter(points; color = Makie.Cycled(2), axis = (; type = GlobeAxis, show_axis = false));</span></span>
<span class="line"><span>lines!(a, GeoMakie.coastlines())</span></span>
<span class="line"><span>f</span></span>
<span class="line"><span></span></span>
<span class="line"><span>poly1 = SST.index_to_polygon_lonlat(1, iseat)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>poly!(a, poly1; strokecolor = :red, strokewidth = 1)</span></span>
<span class="line"><span>f</span></span>
<span class="line"><span></span></span>
<span class="line"><span>lo,up = CartesianIndices(SST.gridsize(iseat))[r] |&gt; extrema</span></span>
<span class="line"><span>bb_isea = map(Colon(), lo.I, up.I)</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>ras = Raster(WorldClim{BioClim}, 5) |&gt; r -&gt; replace_missing(r, NaN)</span></span>
<span class="line"><span>ras = modify(ras) do A</span></span>
<span class="line"><span>    DiskArrays.TestTypes.UnchunkedDiskArray(A)</span></span>
<span class="line"><span>end</span></span>
<span class="line"><span>c = DiskArrays.mockchunks(ras, DiskArrays.GridChunks(size(ras), (100, 100)))</span></span>
<span class="line"><span>lccst = SST.RegularGridTree(c)</span></span>
<span class="line"><span>r2 = GO.query(SST.rootnode(lccst), mycircle)</span></span>
<span class="line"><span>SST.index_to_lonlat.(r2, (lccst,))</span></span>
<span class="line"><span></span></span>
<span class="line"><span>lo, up = CartesianIndices(size(c)[1:2])[r2] |&gt; extrema</span></span>
<span class="line"><span>bb_lccs = map(Colon(), lo.I, up.I)</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>d, i = SST.find_nearest(iseat, (11.0, 53.0))</span></span>
<span class="line"><span>SST.index_to_lonlat(i, iseat)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>d, i = SST.find_nearest(lccst, (11.0, 53.0))</span></span>
<span class="line"><span>SST.index_to_lonlat(i, lccst)</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>source = SST.ProjectionSource(SST.RegularGridTree, c);</span></span>
<span class="line"><span>target = SST.ProjectionTarget(SST.ISEACircleTree, 3, 2);</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>SST.compute_connected_chunks(source, target)</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>a = SST.LazyProjectedDiskArray(source, target)</span></span></code></pre></div><p>How do I get a polygon from a cartesian index?</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SST</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">index_to_polygon_lonlat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CartesianIndex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), target</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tree)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">GeoInterface.Wrappers.Polygon{false, false}([GeoInterface.Wrappers.LineString([(90.0, 26.56505117707799), … (3) … , (90.0, 26.56505117707799)], crs = &quot;EPSG:4326&quot;)], crs = &quot;EPSG:4326&quot;)</span></span></code></pre></div><p>Let&#39;s get every polygon...</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>polys = SST.index_to_polygon_lonlat.(eachindex(a), (target.tree,))</span></span></code></pre></div><p>This is</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>length(polys)</span></span></code></pre></div><p>655360 polygons</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>a[:, 1, :]</span></span></code></pre></div><p>Now we can materialize the lazy array...</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>@time ac = collect(a)</span></span></code></pre></div><p>and GLMakie has no problem visualizing this!</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>poly(vec(polys); color = vec(ac), strokewidth = 1, strokecolor = :black, axis = (; type = GlobeAxis, show_axis = false))</span></span>
<span class="line"><span>meshimage!(-180..180, -90..90, fill(colorant&quot;white&quot;, 2, 2); zlevel = -100_000)</span></span></code></pre></div><p>using GLMakie</p><p>heatmap(c.lccs_class.data[bb_lccs...][:, :, 1])</p><p>ds = SST.create_dataset(target, &quot;./output.zarr/&quot;, arrayname=:lccs_class)</p><p>SST.reproject!(ds.lccs_class,source,target)</p><hr><p><em>This page was generated using <a href="https://github.com/fredrikekre/Literate.jl" target="_blank" rel="noreferrer">Literate.jl</a>.</em></p>`,52)])])}const g=a(p,[["render",t]]);export{k as __pageData,g as default};
